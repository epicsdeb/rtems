#!/usr/bin/make -f
# -*- makefile -*-

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

ifeq (,$(findstring debug,$(DEB_BUILD_OPTIONS)))
CFLAGS:=$(filter-out -g,$(CFLAGS))
CXXFLAGS:=$(filter-out -g,$(CXXFLAGS))
endif

ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
NUMJOBS = $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
MAKEFLAGS += -j$(NUMJOBS)
endif

RTEMS_VER ?=4.9

powerpc_BSPS=mvme2100 mvme2307 mvme3100 mvme5500
i386_BSPS=pc386

# This has to be exported to make some magic below work.
export DH_OPTIONS

# These are used for cross-compiling and for saving the configure script
# from having to guess our platform (since we know it already)
DEB_HOST_GNU_TYPE   ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
DEB_TARGET_GNU_TYPE ?= $(1)-rtems$(RTEMS_VER)
CONFIG= --target=$(call DEB_TARGET_GNU_TYPE,$(1)) --build=$(DEB_BUILD_GNU_TYPE) --host=$(DEB_HOST_GNU_TYPE) \
 --prefix=/usr --mandir=\$${prefix}/share/man --infodir=\$${prefix}/share/info \
--enable-cxx --enable-rdbg --enable-rtemsbsp="$($(1)_BSPS)"

#Do not touch CFLAGS use CFLAGS_FOR_HOST or CFLAGS_FOR_TARGET

build-powerpc/config.status: configure
	dh_testdir
	# Add here commands to configure the package.
ifneq "$(wildcard /usr/share/misc/config.sub)" ""
	cp -f /usr/share/misc/config.sub config.sub
endif
ifneq "$(wildcard /usr/share/misc/config.guess)" ""
	cp -f /usr/share/misc/config.guess config.guess
endif
	install -d build-powerpc
	install -d build-i386
	cd build-powerpc && ../configure $(call CONFIG,powerpc)
	cd build-i386 && ../configure $(call CONFIG,i386)


#Architecture
build: build-arch

build-arch: build-arch-stamp
build-arch-stamp: build-powerpc/config.status 

	# Note: CFLAGS et all must be explicitly unset to avoid
	#       clobbering the target CFLAGS
	env -u CFLAGS -u CXXFLAGS $(MAKE) -C build-powerpc
	env -u CFLAGS -u CXXFLAGS $(MAKE) -C build-i386
	touch $@

clean: 
	dh_testdir
	dh_testroot
	rm -f build-arch-stamp build-indep-stamp 

	rm -rf build-powerpc build-i386
	rm -f config.sub config.guess

	dh_clean 

install: install-indep install-arch
install-indep:
	dh_testdir
	dh_testroot
	dh_installdirs -i

	# Add here commands to install the indep part of the package into
	# debian/<package>-doc.
	#INSTALLDOC#
	install ChangeLog COPYING LICENSE* $(CURDIR)/debian/rtems-common/usr/share/doc/rtems-common/
	install MAINTAINERS README* SUPPORT $(CURDIR)/debian/rtems-common/usr/share/doc/rtems-common/

	dh_install -i

base_prefix=$(CURDIR)/debian/rtems-common/usr
arch_prefix=$(CURDIR)/debian/rtems-$(1)/usr
bsp_prefix=$(CURDIR)/debian/rtems-$(1)/usr

# move BSP specfic files
#  usr/lib/pkgconfig/$(DEB_TARGET_GNU_TYPE)-mvme3100.pc
#  usr/make/custom/mvme3100.pc
#  usr/$(DEB_TARGET_GNU_TYPE)/mvme3100/
# $(1) is arch (ie powerpc)
# $(2) is bsp (ie mvme3100)
define BSP_install
install -d $(call bsp_prefix,$(2))/lib/pkgconfig;
mv $(base_prefix)/lib/pkgconfig/$(1)-rtems$(RTEMS_VER)-$(2).pc $(call bsp_prefix,$(2))/lib/pkgconfig;
install -d $(call bsp_prefix,$(2))/make/custom;
-mv $(base_prefix)/make/custom/$(2).cfg $(call bsp_prefix,$(2))/make/custom/;
install -d $(call bsp_prefix,$(2))/$(1)-rtems$(RTEMS_VER)
mv $(base_prefix)/$(1)-rtems$(RTEMS_VER)/$(2) $(call bsp_prefix,$(2))/$(1)-rtems$(RTEMS_VER);
endef

install-arch:
	dh_testdir
	dh_testroot
	#dh_clean -k -s 
	dh_installdirs -s

	#TODO: avoid duplication.

	# powerpc
	env -u CFLAGS -u CXXFLAGS $(MAKE) -C build-powerpc DESTDIR=$(CURDIR)/debian/rtems-common install

	rm -rf $(CURDIR)/debian/rtems/usr/share

	install -d $(CURDIR)/debian/rtems-powerpc/usr/bin
	mv $(CURDIR)/debian/rtems-common/usr/bin/powerpc-* $(CURDIR)/debian/rtems-powerpc/usr/bin/

	$(foreach bsp,$(powerpc_BSPS),$(call BSP_install,powerpc,$(bsp)))

	## Directories which should be empty now
	#rmdir $(CURDIR)/debian/rtems/usr/$(call DEB_TARGET_GNU_TYPE,powerpc)
	#rmdir $(CURDIR)/debian/rtems/usr/lib/pkgconfig
	#rmdir $(CURDIR)/debian/rtems/usr/lib
	rm -rf $(CURDIR)/debian/rtems-common


	# i386
	env -u CFLAGS -u CXXFLAGS $(MAKE) -C build-i386 DESTDIR=$(CURDIR)/debian/rtems-common install

	rm -rf $(CURDIR)/debian/rtems-common/usr/share

	install -d $(CURDIR)/debian/rtems-i386/usr/bin
	mv $(CURDIR)/debian/rtems-common/usr/bin/i386-* $(CURDIR)/debian/rtems-i386/usr/bin/

	$(foreach bsp,$(i386_BSPS),$(call BSP_install,i386,$(bsp)))

	# Directories which should be empty now
	rmdir $(CURDIR)/debian/rtems-common/usr/$(call DEB_TARGET_GNU_TYPE,i386)
	rmdir $(CURDIR)/debian/rtems-common/usr/lib/pkgconfig
	rmdir $(CURDIR)/debian/rtems-common/usr/lib

	dh_install -s
# Must not depend on anything. This is to be called by
# binary-arch/binary-indep
# in another 'make' thread.
binary-common:
	dh_testdir
	dh_testroot
	dh_installchangelogs ChangeLog
	dh_installdocs
	dh_installexamples
	dh_installman
	dh_link
	#dh_strip
	dh_compress
	dh_fixperms
	dh_makeshlibs
	dh_installdeb
	#dh_shlibdeps
	dh_gencontrol
	dh_md5sums
	dh_builddeb
# Build architecture independant packages using the common target.
binary-indep: install-indep
	$(MAKE) -f debian/rules DH_OPTIONS=-i binary-common

# Build architecture dependant packages using the common target.
binary-arch: build-arch install-arch
	$(MAKE) -f debian/rules DH_OPTIONS=-s binary-common

binary: binary-arch binary-indep
.PHONY: build clean binary-indep binary-arch binary install install-indep install-arch 
